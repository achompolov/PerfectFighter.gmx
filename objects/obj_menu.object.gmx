<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The menu layout

//menu[page,item]=itemContent;
//menu[page,0]=amount of content;

draw_set_font(fn_menu);

menu[0,0] = 3;
menu[0,1] = "Play Game";
menu[0,2] = "Options";
menu[0,3] = "Quit";

menu[1,0] = 3;
menu[1,1] = "Resume game";
menu[1,2] = "New game";
menu[1,3] = "Back";

menu[2,0] = 3;
//menu[2,1] = "Fullscreen On";
//menu[2,2] = "Fullscreen Off";
menu[2,1] = "Music";
menu[2,2] = "Controls";
menu[2,3] = "Back";

page = 0;
current = 1;

//space = 64;
//mpos = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var move = 0;
move -= max(keyboard_check_pressed(vk_up),keyboard_check_pressed(ord("W")),0);
move += max(keyboard_check_pressed(vk_down),keyboard_check_pressed(ord("S")),0);

if (move != 0) {
    mpos += move; }

    //if (mpos &lt; 0) mpos = array_length_2d(menu) - 1;
    //if (mpos &gt; array_length_2d(menu) - 1) mpos = 0;


var push;
push = max (keyboard_check_released(vk_enter), keyboard_check_released(vk_shift), keyboard_check_released(vk_space), 0);
if (push == 1) scr_menu();*/


if (keyboard_check_pressed(vk_up)) {
    if (current == 1) {
        current = menu[page,0];
    } else {
        current -= 1;
    }
}

if (keyboard_check_pressed(vk_down)) {
    if (current == menu[page,0]) {
        current = 1;
    } else {
        current += 1;
    }
}

if (keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_right)) {
    switch (page) {
        case 0:
            switch(current) {
                case 1:
                    page = 1;
                    current = 1;
                break;
                
                case 2:
                    page = 2;
                    current = 1;
                break;
                
                case 3:
                    game_end();
                break;
        }
    break;
    
        case 1: //The play menu
            switch(current) {
                case 1: 
                    //show_message("You are about to resume a game!");
                    scr_loadgame();
                break;
                
                case 2: 
                    //show_message("You are about to create a new game!");
                    room_goto_next();
                break;
                
                case 3:
                    page = 0;
                    current = 1;
                break;
            }
            break;
        
        case 2: //The options menu
            switch(current) {
               /* case 1:
                    window_set_fullscreen(1);
                    show_message("Fullscreen On!");
                break;
                
                case 2:
                    window_set_fullscreen(0);
                    show_message("Fullscreen Off!");
                break;*/
                
                case 1:
                    show_message("Currently not available");
                break;
                
                case 2:
                    draw_sprite(spr_controls, 0,room_height/2,room_width/2);
                    //show_message("Use arrow keys for move.'Space' to jump. Double 'Space' to double jump.");
                break;
                
                case 3:
                    page = 0;
                    current = 1;
                break;    
            }
            break;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(fn_menu);
draw_set_color(c_white);*/

for (i = 1; i &lt;= menu[page,0]; i += 1) {
    if(i==current) {
        draw_set_color(c_red);
        draw_text(600,390+string_height("Pq")*(i-1),menu[page,i]);
    } else {
        draw_set_color(c_white);
        draw_text(600,390+(string_height("Pq")*(i-1)),menu[page,i]);
    }
    
}



//var m;
/*for (m=1; m &lt;= menu[page,0]; m+=1); {
    if (m == cuurrent) {
        draw_set_color(c_red);
        draw_text(x + space, y + (m * space), menu[mpos,m]);
    } else {
        draw_set_color(c_white);
        draw_text(x + space, y + (m * space), menu[mpos,m]);
    }
}

draw_sprite(sprite_index, 0, x+16, y+mpos * space);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
